// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	models "github.com/GZ91/bonussystem/internal/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// AuthenticationUser provides a mock function with given fields: ctx, login, password
func (_m *Service) AuthenticationUser(ctx context.Context, login string, password string) (*http.Cookie, error) {
	ret := _m.Called(ctx, login, password)

	var r0 *http.Cookie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*http.Cookie, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *http.Cookie); ok {
		r0 = rf(ctx, login, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_AuthenticationUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticationUser'
type Service_AuthenticationUser_Call struct {
	*mock.Call
}

// AuthenticationUser is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - password string
func (_e *Service_Expecter) AuthenticationUser(ctx interface{}, login interface{}, password interface{}) *Service_AuthenticationUser_Call {
	return &Service_AuthenticationUser_Call{Call: _e.mock.On("AuthenticationUser", ctx, login, password)}
}

func (_c *Service_AuthenticationUser_Call) Run(run func(ctx context.Context, login string, password string)) *Service_AuthenticationUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_AuthenticationUser_Call) Return(_a0 *http.Cookie, _a1 error) *Service_AuthenticationUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_AuthenticationUser_Call) RunAndReturn(run func(context.Context, string, string) (*http.Cookie, error)) *Service_AuthenticationUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewUser provides a mock function with given fields: ctx, login, password
func (_m *Service) CreateNewUser(ctx context.Context, login string, password string) (*http.Cookie, error) {
	ret := _m.Called(ctx, login, password)

	var r0 *http.Cookie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*http.Cookie, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *http.Cookie); ok {
		r0 = rf(ctx, login, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_CreateNewUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewUser'
type Service_CreateNewUser_Call struct {
	*mock.Call
}

// CreateNewUser is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - password string
func (_e *Service_Expecter) CreateNewUser(ctx interface{}, login interface{}, password interface{}) *Service_CreateNewUser_Call {
	return &Service_CreateNewUser_Call{Call: _e.mock.On("CreateNewUser", ctx, login, password)}
}

func (_c *Service_CreateNewUser_Call) Run(run func(ctx context.Context, login string, password string)) *Service_CreateNewUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_CreateNewUser_Call) Return(_a0 *http.Cookie, _a1 error) *Service_CreateNewUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_CreateNewUser_Call) RunAndReturn(run func(context.Context, string, string) (*http.Cookie, error)) *Service_CreateNewUser_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadOrder provides a mock function with given fields: ctx, number, userID
func (_m *Service) DownloadOrder(ctx context.Context, number string, userID string) error {
	ret := _m.Called(ctx, number, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, number, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DownloadOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadOrder'
type Service_DownloadOrder_Call struct {
	*mock.Call
}

// DownloadOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - number string
//   - userID string
func (_e *Service_Expecter) DownloadOrder(ctx interface{}, number interface{}, userID interface{}) *Service_DownloadOrder_Call {
	return &Service_DownloadOrder_Call{Call: _e.mock.On("DownloadOrder", ctx, number, userID)}
}

func (_c *Service_DownloadOrder_Call) Run(run func(ctx context.Context, number string, userID string)) *Service_DownloadOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_DownloadOrder_Call) Return(_a0 error) *Service_DownloadOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_DownloadOrder_Call) RunAndReturn(run func(context.Context, string, string) error) *Service_DownloadOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: ctx, userID
func (_m *Service) GetBalance(ctx context.Context, userID string) (models.DataBalance, error) {
	ret := _m.Called(ctx, userID)

	var r0 models.DataBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.DataBalance, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.DataBalance); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.DataBalance)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type Service_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *Service_Expecter) GetBalance(ctx interface{}, userID interface{}) *Service_GetBalance_Call {
	return &Service_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, userID)}
}

func (_c *Service_GetBalance_Call) Run(run func(ctx context.Context, userID string)) *Service_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_GetBalance_Call) Return(_a0 models.DataBalance, _a1 error) *Service_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetBalance_Call) RunAndReturn(run func(context.Context, string) (models.DataBalance, error)) *Service_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, userID
func (_m *Service) GetOrders(ctx context.Context, userID string) ([]models.DataOrder, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.DataOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.DataOrder, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.DataOrder); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DataOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type Service_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *Service_Expecter) GetOrders(ctx interface{}, userID interface{}) *Service_GetOrders_Call {
	return &Service_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx, userID)}
}

func (_c *Service_GetOrders_Call) Run(run func(ctx context.Context, userID string)) *Service_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_GetOrders_Call) Return(_a0 []models.DataOrder, _a1 error) *Service_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetOrders_Call) RunAndReturn(run func(context.Context, string) ([]models.DataOrder, error)) *Service_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, data, userID
func (_m *Service) Withdraw(ctx context.Context, data models.WithdrawData, userID string) error {
	ret := _m.Called(ctx, data, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WithdrawData, string) error); ok {
		r0 = rf(ctx, data, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type Service_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - data models.WithdrawData
//   - userID string
func (_e *Service_Expecter) Withdraw(ctx interface{}, data interface{}, userID interface{}) *Service_Withdraw_Call {
	return &Service_Withdraw_Call{Call: _e.mock.On("Withdraw", ctx, data, userID)}
}

func (_c *Service_Withdraw_Call) Run(run func(ctx context.Context, data models.WithdrawData, userID string)) *Service_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.WithdrawData), args[2].(string))
	})
	return _c
}

func (_c *Service_Withdraw_Call) Return(_a0 error) *Service_Withdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Withdraw_Call) RunAndReturn(run func(context.Context, models.WithdrawData, string) error) *Service_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// Withdrawals provides a mock function with given fields: ctx, userID
func (_m *Service) Withdrawals(ctx context.Context, userID string) ([]models.WithdrawalsData, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.WithdrawalsData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.WithdrawalsData, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.WithdrawalsData); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WithdrawalsData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Withdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdrawals'
type Service_Withdrawals_Call struct {
	*mock.Call
}

// Withdrawals is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *Service_Expecter) Withdrawals(ctx interface{}, userID interface{}) *Service_Withdrawals_Call {
	return &Service_Withdrawals_Call{Call: _e.mock.On("Withdrawals", ctx, userID)}
}

func (_c *Service_Withdrawals_Call) Run(run func(ctx context.Context, userID string)) *Service_Withdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_Withdrawals_Call) Return(_a0 []models.WithdrawalsData, _a1 error) *Service_Withdrawals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Withdrawals_Call) RunAndReturn(run func(context.Context, string) ([]models.WithdrawalsData, error)) *Service_Withdrawals_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
