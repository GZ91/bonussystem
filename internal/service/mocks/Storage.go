// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/GZ91/bonussystem/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// AuthenticationUser provides a mock function with given fields: ctx, login, password
func (_m *Storage) AuthenticationUser(ctx context.Context, login string, password string) (string, error) {
	ret := _m.Called(ctx, login, password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_AuthenticationUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticationUser'
type Storage_AuthenticationUser_Call struct {
	*mock.Call
}

// AuthenticationUser is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - password string
func (_e *Storage_Expecter) AuthenticationUser(ctx interface{}, login interface{}, password interface{}) *Storage_AuthenticationUser_Call {
	return &Storage_AuthenticationUser_Call{Call: _e.mock.On("AuthenticationUser", ctx, login, password)}
}

func (_c *Storage_AuthenticationUser_Call) Run(run func(ctx context.Context, login string, password string)) *Storage_AuthenticationUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Storage_AuthenticationUser_Call) Return(_a0 string, _a1 error) *Storage_AuthenticationUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_AuthenticationUser_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *Storage_AuthenticationUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewUser provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Storage) CreateNewUser(_a0 context.Context, _a1 string, _a2 string, _a3 string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_CreateNewUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewUser'
type Storage_CreateNewUser_Call struct {
	*mock.Call
}

// CreateNewUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
//   - _a3 string
func (_e *Storage_Expecter) CreateNewUser(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *Storage_CreateNewUser_Call {
	return &Storage_CreateNewUser_Call{Call: _e.mock.On("CreateNewUser", _a0, _a1, _a2, _a3)}
}

func (_c *Storage_CreateNewUser_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string, _a3 string)) *Storage_CreateNewUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Storage_CreateNewUser_Call) Return(_a0 error) *Storage_CreateNewUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_CreateNewUser_Call) RunAndReturn(run func(context.Context, string, string, string) error) *Storage_CreateNewUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, number, userID
func (_m *Storage) CreateOrder(ctx context.Context, number string, userID string) error {
	ret := _m.Called(ctx, number, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, number, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type Storage_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - number string
//   - userID string
func (_e *Storage_Expecter) CreateOrder(ctx interface{}, number interface{}, userID interface{}) *Storage_CreateOrder_Call {
	return &Storage_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, number, userID)}
}

func (_c *Storage_CreateOrder_Call) Run(run func(ctx context.Context, number string, userID string)) *Storage_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Storage_CreateOrder_Call) Return(_a0 error) *Storage_CreateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_CreateOrder_Call) RunAndReturn(run func(context.Context, string, string) error) *Storage_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: ctx, userID
func (_m *Storage) GetBalance(ctx context.Context, userID string) (float64, float64, error) {
	ret := _m.Called(ctx, userID)

	var r0 float64
	var r1 float64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, float64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) float64); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Storage_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type Storage_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *Storage_Expecter) GetBalance(ctx interface{}, userID interface{}) *Storage_GetBalance_Call {
	return &Storage_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, userID)}
}

func (_c *Storage_GetBalance_Call) Run(run func(ctx context.Context, userID string)) *Storage_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_GetBalance_Call) Return(current float64, withdrawn float64, err error) *Storage_GetBalance_Call {
	_c.Call.Return(current, withdrawn, err)
	return _c
}

func (_c *Storage_GetBalance_Call) RunAndReturn(run func(context.Context, string) (float64, float64, error)) *Storage_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, userID
func (_m *Storage) GetOrders(ctx context.Context, userID string) ([]models.DataOrder, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.DataOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.DataOrder, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.DataOrder); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DataOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type Storage_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *Storage_Expecter) GetOrders(ctx interface{}, userID interface{}) *Storage_GetOrders_Call {
	return &Storage_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx, userID)}
}

func (_c *Storage_GetOrders_Call) Run(run func(ctx context.Context, userID string)) *Storage_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_GetOrders_Call) Return(_a0 []models.DataOrder, _a1 error) *Storage_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetOrders_Call) RunAndReturn(run func(context.Context, string) ([]models.DataOrder, error)) *Storage_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrdersForProcessing provides a mock function with given fields: ctx
func (_m *Storage) GetOrdersForProcessing(ctx context.Context) ([]models.DataForProcessing, error) {
	ret := _m.Called(ctx)

	var r0 []models.DataForProcessing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.DataForProcessing, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.DataForProcessing); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DataForProcessing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_GetOrdersForProcessing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrdersForProcessing'
type Storage_GetOrdersForProcessing_Call struct {
	*mock.Call
}

// GetOrdersForProcessing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Storage_Expecter) GetOrdersForProcessing(ctx interface{}) *Storage_GetOrdersForProcessing_Call {
	return &Storage_GetOrdersForProcessing_Call{Call: _e.mock.On("GetOrdersForProcessing", ctx)}
}

func (_c *Storage_GetOrdersForProcessing_Call) Run(run func(ctx context.Context)) *Storage_GetOrdersForProcessing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Storage_GetOrdersForProcessing_Call) Return(_a0 []models.DataForProcessing, _a1 error) *Storage_GetOrdersForProcessing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_GetOrdersForProcessing_Call) RunAndReturn(run func(context.Context) ([]models.DataForProcessing, error)) *Storage_GetOrdersForProcessing_Call {
	_c.Call.Return(run)
	return _c
}

// NewBalance provides a mock function with given fields: ctx, NewCurrent, userID
func (_m *Storage) NewBalance(ctx context.Context, NewCurrent float64, userID string) error {
	ret := _m.Called(ctx, NewCurrent, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, string) error); ok {
		r0 = rf(ctx, NewCurrent, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_NewBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewBalance'
type Storage_NewBalance_Call struct {
	*mock.Call
}

// NewBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - NewCurrent float64
//   - userID string
func (_e *Storage_Expecter) NewBalance(ctx interface{}, NewCurrent interface{}, userID interface{}) *Storage_NewBalance_Call {
	return &Storage_NewBalance_Call{Call: _e.mock.On("NewBalance", ctx, NewCurrent, userID)}
}

func (_c *Storage_NewBalance_Call) Run(run func(ctx context.Context, NewCurrent float64, userID string)) *Storage_NewBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64), args[2].(string))
	})
	return _c
}

func (_c *Storage_NewBalance_Call) Return(_a0 error) *Storage_NewBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_NewBalance_Call) RunAndReturn(run func(context.Context, float64, string) error) *Storage_NewBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatusOrder provides a mock function with given fields: ctx, number, status, accural
func (_m *Storage) NewStatusOrder(ctx context.Context, number string, status string, accural float64) error {
	ret := _m.Called(ctx, number, status, accural)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) error); ok {
		r0 = rf(ctx, number, status, accural)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_NewStatusOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewStatusOrder'
type Storage_NewStatusOrder_Call struct {
	*mock.Call
}

// NewStatusOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - number string
//   - status string
//   - accural float64
func (_e *Storage_Expecter) NewStatusOrder(ctx interface{}, number interface{}, status interface{}, accural interface{}) *Storage_NewStatusOrder_Call {
	return &Storage_NewStatusOrder_Call{Call: _e.mock.On("NewStatusOrder", ctx, number, status, accural)}
}

func (_c *Storage_NewStatusOrder_Call) Run(run func(ctx context.Context, number string, status string, accural float64)) *Storage_NewStatusOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *Storage_NewStatusOrder_Call) Return(_a0 error) *Storage_NewStatusOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_NewStatusOrder_Call) RunAndReturn(run func(context.Context, string, string, float64) error) *Storage_NewStatusOrder_Call {
	_c.Call.Return(run)
	return _c
}

// Withdraw provides a mock function with given fields: ctx, NewCurrent, NewWithdraw, data, userID
func (_m *Storage) Withdraw(ctx context.Context, NewCurrent float64, NewWithdraw float64, data models.WithdrawData, userID string) error {
	ret := _m.Called(ctx, NewCurrent, NewWithdraw, data, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, models.WithdrawData, string) error); ok {
		r0 = rf(ctx, NewCurrent, NewWithdraw, data, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type Storage_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - NewCurrent float64
//   - NewWithdraw float64
//   - data models.WithdrawData
//   - userID string
func (_e *Storage_Expecter) Withdraw(ctx interface{}, NewCurrent interface{}, NewWithdraw interface{}, data interface{}, userID interface{}) *Storage_Withdraw_Call {
	return &Storage_Withdraw_Call{Call: _e.mock.On("Withdraw", ctx, NewCurrent, NewWithdraw, data, userID)}
}

func (_c *Storage_Withdraw_Call) Run(run func(ctx context.Context, NewCurrent float64, NewWithdraw float64, data models.WithdrawData, userID string)) *Storage_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(float64), args[2].(float64), args[3].(models.WithdrawData), args[4].(string))
	})
	return _c
}

func (_c *Storage_Withdraw_Call) Return(_a0 error) *Storage_Withdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_Withdraw_Call) RunAndReturn(run func(context.Context, float64, float64, models.WithdrawData, string) error) *Storage_Withdraw_Call {
	_c.Call.Return(run)
	return _c
}

// Withdrawals provides a mock function with given fields: ctx, userID
func (_m *Storage) Withdrawals(ctx context.Context, userID string) ([]models.WithdrawalsData, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.WithdrawalsData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.WithdrawalsData, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.WithdrawalsData); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WithdrawalsData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_Withdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdrawals'
type Storage_Withdrawals_Call struct {
	*mock.Call
}

// Withdrawals is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *Storage_Expecter) Withdrawals(ctx interface{}, userID interface{}) *Storage_Withdrawals_Call {
	return &Storage_Withdrawals_Call{Call: _e.mock.On("Withdrawals", ctx, userID)}
}

func (_c *Storage_Withdrawals_Call) Run(run func(ctx context.Context, userID string)) *Storage_Withdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_Withdrawals_Call) Return(_a0 []models.WithdrawalsData, _a1 error) *Storage_Withdrawals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_Withdrawals_Call) RunAndReturn(run func(context.Context, string) ([]models.WithdrawalsData, error)) *Storage_Withdrawals_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
